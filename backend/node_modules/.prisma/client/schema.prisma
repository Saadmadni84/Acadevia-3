generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  username  String    @unique
  password  String
  firstName String?
  lastName  String?
  avatar    String?
  role      Role      @default(STUDENT)
  level     Int       @default(1)
  xp        Int       @default(0)
  coins     Int       @default(0)
  streak    Int       @default(0)
  lastLogin DateTime?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  enrollments   Enrollment[]
  progress      Progress[]
  achievements  UserAchievement[]
  payments      Payment[]
  notifications Notification[]
  chatMessages  ChatMessage[]
  submissions   Submission[]
  badges        UserBadge[]

  @@map("users")
}

model Course {
  id          String   @id @default(uuid())
  title       String
  description String
  thumbnail   String?
  difficulty  String
  category    String
  price       Float    @default(0)
  xpReward    Int      @default(100)
  duration    Int // in minutes
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  lessons     Lesson[]
  enrollments Enrollment[]
  progress    Progress[]
  quizzes     Quiz[]

  @@map("courses")
}

model Lesson {
  id        String   @id @default(uuid())
  title     String
  content   String
  videoUrl  String?
  order     Int
  duration  Int // in minutes
  xpReward  Int      @default(50)
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  course   Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress Progress[]

  @@map("lessons")
}

model Enrollment {
  id          String           @id @default(uuid())
  userId      String
  courseId    String
  status      EnrollmentStatus @default(ACTIVE)
  enrolledAt  DateTime         @default(now())
  completedAt DateTime?
  progress    Float            @default(0)

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("enrollments")
}

model Progress {
  id          String    @id @default(uuid())
  userId      String
  courseId    String
  lessonId    String
  isComplete  Boolean   @default(false)
  timeSpent   Int       @default(0) // in minutes
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@map("progress")
}

model Quiz {
  id           String   @id @default(uuid())
  title        String
  courseId     String
  timeLimit    Int? // in minutes
  passingScore Int      @default(70)
  xpReward     Int      @default(100)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  course      Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  questions   Question[]
  submissions Submission[]

  @@map("quizzes")
}

model Question {
  id            String   @id @default(uuid())
  quizId        String
  question      String
  options       String[]
  correctAnswer Int
  points        Int      @default(10)
  explanation   String?
  createdAt     DateTime @default(now())

  // Relations
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@map("questions")
}

model Submission {
  id        String   @id @default(uuid())
  userId    String
  quizId    String
  answers   Json
  score     Int
  timeSpent Int // in seconds
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@map("submissions")
}

model Achievement {
  id          String @id @default(uuid())
  name        String
  description String
  icon        String
  xpReward    Int    @default(500)
  condition   Json // JSON storing achievement conditions

  // Relations
  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String   @id @default(uuid())
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())

  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model Badge {
  id          String @id @default(uuid())
  name        String
  description String
  icon        String
  color       String

  // Relations
  userBadges UserBadge[]

  @@map("badges")
}

model UserBadge {
  id       String   @id @default(uuid())
  userId   String
  badgeId  String
  earnedAt DateTime @default(now())

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge Badge @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId])
  @@map("user_badges")
}

model Payment {
  id            String        @id @default(uuid())
  userId        String
  amount        Float
  currency      String        @default("INR")
  status        PaymentStatus @default(PENDING)
  paymentMethod String
  transactionId String?
  metadata      Json?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  title     String
  message   String
  type      NotificationType @default(INFO)
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model ChatMessage {
  id        String   @id @default(uuid())
  userId    String
  message   String
  room      String   @default("general")
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

enum Role {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum EnrollmentStatus {
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  ACHIEVEMENT
}
