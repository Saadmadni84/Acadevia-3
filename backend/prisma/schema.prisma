// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String    @id @default(cuid())
  email                     String    @unique
  username                  String    @unique
  password                  String
  isVerified                Boolean   @default(false)  // Your new field
  emailVerificationToken    String?
  emailVerificationExpires  DateTime?
  passwordResetToken        String?
  passwordResetExpires      DateTime?
  role                      Role      @default(STUDENT)
  
  // Profile fields
  firstName                 String?
  lastName                  String?
  avatar                    String?
  bio                       String?
  
  // Game profile fields
  level                     Int       @default(1)
  experience                Int       @default(0)
  points                    Int       @default(0)
  badges                    String[]  @default([])
  achievements              String[]  @default([])
  
  // Relations - ADD THESE MISSING FIELDS
  instructedCourses         Course[]  @relation("CourseInstructor")  // This was missing!
  enrollments               Enrollment[]
  quizAttempts              QuizAttempt[]
  gameProgress              GameProgress[]
  
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt

  @@map("users")
}

model Course {
  id             String       @id @default(cuid())
  title          String
  description    String
  thumbnail      String?
  price          Float?
  level          CourseLevel  @default(BEGINNER)
  duration       Int          // in minutes
  instructorId   String
  
  // Relations
  instructor     User         @relation("CourseInstructor", fields: [instructorId], references: [id])
  lectures       Lecture[]
  enrollments    Enrollment[]
  quizzes        Quiz[]
  
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("courses")
}

model Enrollment {
  id             String          @id @default(cuid())
  userId         String
  courseId       String
  status         EnrollmentStatus @default(ACTIVE)
  progress       Float           @default(0) // percentage 0-100
  completedAt    DateTime?
  
  // Relations
  user           User            @relation(fields: [userId], references: [id])
  course         Course          @relation(fields: [courseId], references: [id])
  
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@unique([userId, courseId])
  @@map("enrollments")
}

model Lecture {
  id             String      @id @default(cuid())
  title          String
  description    String?
  videoUrl       String?
  duration       Int         // in minutes
  order          Int
  courseId       String
  
  // Relations
  course         Course      @relation(fields: [courseId], references: [id])
  
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@map("lectures")
}

model Quiz {
  id             String        @id @default(cuid())
  title          String
  description    String?
  courseId       String
  passingScore   Int           @default(70) // percentage
  timeLimit      Int?          // in minutes
  
  // Relations
  course         Course        @relation(fields: [courseId], references: [id])
  questions      Question[]
  attempts       QuizAttempt[]
  
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@map("quizzes")
}

model Question {
  id             String    @id @default(cuid())
  text           String
  type           QuestionType
  options        Json?     // For multiple choice questions
  correctAnswer  String
  points         Int       @default(1)
  quizId         String
  
  // Relations
  quiz           Quiz      @relation(fields: [quizId], references: [id])
  
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@map("questions")
}

model QuizAttempt {
  id             String    @id @default(cuid())
  userId         String
  quizId         String
  score          Float
  answers        Json      // Store user answers
  completedAt    DateTime
  
  // Relations
  user           User      @relation(fields: [userId], references: [id])
  quiz           Quiz      @relation(fields: [quizId], references: [id])
  
  createdAt      DateTime  @default(now())

  @@map("quiz_attempts")
}

model GameProgress {
  id             String    @id @default(cuid())
  userId         String
  type           GameType  // QUIZ, COURSE_COMPLETION, etc.
  referenceId    String    // ID of the related entity (quiz, course, etc.)
  pointsEarned   Int
  experienceGained Int
  achievementUnlocked String?
  
  // Relations
  user           User      @relation(fields: [userId], references: [id])
  
  createdAt      DateTime  @default(now())

  @@map("game_progress")
}

// Enums
enum Role {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  SUSPENDED
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  SHORT_ANSWER
  ESSAY
}

enum GameType {
  QUIZ_COMPLETION
  COURSE_COMPLETION
  DAILY_LOGIN
  STREAK_ACHIEVEMENT
  LEVEL_UP
}
